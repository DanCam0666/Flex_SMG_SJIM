@model Flex_SGM.Models.Bitacora

@{
    ViewBag.Title = "Crear";
}
    <div style="max-width: 80%; margin: auto;">
        <center><h1>Crear Registro</h1></center>

          
        <div class="x_panel">
            <div class="x_title clearfix">
                @using (Html.BeginForm("Createa", "Bitacoras"))
                {
                    string area = ViewBag.Area;
                    <center><label>Filtrar Registro por @area</label></center>

                    <div class="form-horizontal col-md-12" style="margin-left: 7%">

                        @{foreach (System.Web.Mvc.SelectListItem x in @ViewBag.listarea)
                            {
                                <input type="submit" name="Area" value=@x.Text class="btn btn-primary  col-md-2" style="margin-bottom: 2px" />
                            };
                        }
                    </div>
                    switch (area)
                    {
                        case "Cont_Imprv_ManP":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/CI_MP/Create" />
                            break;
                        case "Safety_HS":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Safety_HS/Create" />
                            break;
                        case "Scrap":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Scrap/Create" />
                            break;
                        case "LPA_COVID":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/LPA_COVID/Create" />
                            break;
                        case "PLM":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/PLM/Create" />
                            break;
                        case "GAPs":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/GAPs/Create" />
                            break;
                        case "ECNs_PCRs":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/ECNs_PCRs/Create" />
                            break;
                        case "Capacities":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Capacities/Create" />
                            break;
                        case "Customer_Complaints":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Customer_Complaints/Create" />
                            break;
                        case "Lay_Out":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Lay_Out/Create" />
                            break;
                        case "TOC_HS_Audits":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/TOC_HS_Audits/Create" />
                            break;
                        case "Cust_Score_Cards":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Cust_Score_Cards/Create" />
                            break;
                        case "Parts_Delivery":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Parts_Delivery/Create" />
                            break;
                        case "LIM_Invt_Ctrl":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/LIM_Invt_Ctrl/Create" />
                            break;
                        case "Quality_HS":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Quality_HS/Create" />
                            break;
                        case "Blue_Book":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Blue_Book/Create" />
                            break;
                        case "Red_Rabbits":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Red_Rabbits/Create" />
                            break;
                        case "AMEF":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/AMEF/Create" />
                            break;
                        case "Packaging":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Packaging/Create" />
                            break;
                        case "Yellow_Sheets":
                            <meta http-equiv="refresh" content="0; URL=http://localhost:44356/Yellow_Sheets/Create" />
                            break;
                    }
                }
            </div>
           @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="x_content clearfix">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-group">
                            @Html.Label("Usuario", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Usuario, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                @Html.HiddenFor(model => model.Usuario)
                                @Html.ValidationMessageFor(model => model.Usuario, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiaHora, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.DiaHora, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "datetimepicker4" } })
                                @Html.ValidationMessageFor(model => model.DiaHora, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.MaquinasID, "MaquinasID", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.DropDownList("MaquinasID", null, htmlAttributes: new { @class = "form-control", id = "Normaldrop" })
                                @Html.ValidationMessageFor(model => model.MaquinasID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group" style="margin-left: 16%">
                            <div class="col-md-4">
                                @Html.Label("Tipo", htmlAttributes: new { @class = "control-label col-md-1" })
                                @Html.DropDownList("ltipos", null, htmlAttributes: new { @class = "form-control", data_url = Url.Action("code1"), id = "MyViewFallas_Desx11" })
                                @Html.ValidationMessage("ltipos")
                            </div>
                            <div class="col-md-4">
                                @Html.Label("Falla", htmlAttributes: new { @class = "control-label col-md-1" })
                                @Html.DropDownList("lareas", null, htmlAttributes: new { @class = "form-control", data_url = Url.Action("code2"), id = "MyViewFallas_Desx22" })
                                @Html.ValidationMessage("lareas")
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Descripcion, null, new { htmlAttributes = new { @class = "form-control", data_url = Url.Action("code"), id = "Normaldropx" } })
                                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sintoma, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Sintoma, 2, 100, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Sintoma, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Causa, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Causa, 4, 100, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Causa, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AccionCorrectiva, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.AccionCorrectiva, 10, 100, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AccionCorrectiva, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Atendio, htmlAttributes: new { @class = "control-label  col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Atendio, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Atendio, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Folio, htmlAttributes: new { @class = "control-label  col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Folio, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Folio, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Scrap, htmlAttributes: new { @class = "control-label  col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Scrap, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Scrap, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Tiempo, htmlAttributes: new { @class = "control-label  col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.Tiempo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Tiempo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12" style="padding-left: 25%">
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.findesemana, htmlAttributes: new { @class = "control-label" })
                                <p class="col-md-6">
                                    @Html.EditorFor(model => model.findesemana, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.findesemana, "", new { @class = "text-danger" })
                                </p>
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.Fallaoperacion, htmlAttributes: new { @class = "control-label" })
                                <p class="col-md-6">
                                    @Html.EditorFor(model => model.Fallaoperacion, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.Fallaoperacion, "", new { @class = "text-danger" })
                                </p>
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.MttoPreventivo, htmlAttributes: new { @class = "control-label" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.MttoPreventivo, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.MttoPreventivo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.MttoCorrectivo, htmlAttributes: new { @class = "control-label" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.MttoCorrectivo, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.MttoCorrectivo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.MttoMejora, htmlAttributes: new { @class = "control-label" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.MttoMejora, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.MttoMejora, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group col-md-3">
                                @Html.LabelFor(model => model.noterminado, htmlAttributes: new { @class = "control-label  col-md-9" })
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.noterminado, new { htmlAttributes = new { @class = "checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.noterminado, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-9">
                                <div class="col-md-10" id="boton">
                                    <input type="submit" onclick="$('#loadingImg').show();setTimeout(function () { $('#loadingImg').fadeOut(); }, 5000);" value="Crear Registro" class="btn btn-success" style="width:600px;" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
     

        <div>
            @Html.ActionLink("Regresar a la Lista", "Index")
        </div>
    </div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('#datetimepicker4').datetimepicker({ format: 'DD/MM/YYYY HH:mm' });
            $("#Normaldrop").chosen();
            $("#Normaldrop1").chosen();
            $("#Normaldrop2").chosen();

            $("#Normaldropx").change(function () {
                var url = $(this).data('url');
                var data = { Codigo: $(this).val() };
                $.getJSON(url, data, function (data) {
                    $("#MyViewFallas_Desx1").text(data.x1des);
                    $("#MyViewFallas_Desx1").val(data.x1des);
                    $("#MyViewFallas_Desx2").text(data.x2des);
                    $("#MyViewFallas_Desx2").val(data.x2des);
                });
            });

            $('#MyViewFallas_Desx11').click(function () {
                var url = $(this).data('url');
                var data = { Tipo: $(this).val() };
                $.getJSON(url, data, function (response) {
                    $('#MyViewFallas_Desx22').empty(); // remove any existing options
                    $.each(response, function (index, item) {
                        $('#MyViewFallas_Desx22').append($('<option></option>').text(item));
                    });
                    $('#MyViewFallas_Desx22').click();
                });
            });

            $('#MyViewFallas_Desx22').click(function () {
                var url = $(this).data('url');
                var data = { Tipo: $('#MyViewFallas_Desx11').val(), Des: $(this).val() };
                $.getJSON(url, data, function (response) {
                           
                    $('#Normaldropx').val(response); // remove any existing options  
                    $('#Normaldropx').text(response); 
                    // $('#Normaldropx').value(response);
                });
            });

            $('#Normaldropx').focusin(function () {

                $('#MyViewFallas_Desx11').focus();

            });
        });

        $(function () {

            $("#@Html.IdFor(s => s.Tiempo)")
            .on("input",function () {

                if ($(this).val() < 0 || $(this).val() > 440) {
                    alert("El TIEMPO reportado no puede ser menor a 0 minutos o mayor que 440 muinutos por Turno...");
                    $(this).val("");
                }
            });
        });
        //setTimeout(function(){ $('#boton').show(); }, 4000); $('#boton').hide();
    </script>
}
