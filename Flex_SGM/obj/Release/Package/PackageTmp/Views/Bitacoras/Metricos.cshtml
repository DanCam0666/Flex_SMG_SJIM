@using Flex_SGM.Models;
@model List<newmetricos>


@{
    ViewBag.Title = "Bitacora";
}
<br />
<br />
<div class="x_panel">
    <h2 class="x_title">@ViewBag.info</h2>
    <div class="x_content">
        <table class="table table-bordered table-striped" id="metricox">
            <thead>
                <tr>
                    <th>@Html.Label("Nombre Maquina")</th>
                    <th>@Html.Label("Total Suma de fallas registradas")</th>
                    <th>@Html.Label("Total Suma de tiempo fallas registradas")</th>
                    <th>@Html.Label("MTTR")</th>
                    <th>@Html.Label("MTBF")</th>
                    <th>@Html.Label("% Confiabilidad")</th>
                    <th>@Html.Label("-")</th>
                    <th>@Html.Label("1er Turno Suma de fallas registradas")</th>
                    <th>@Html.Label("1er Turno Suma de tiempo fallas registradas")</th>
                    <th>@Html.Label("MTTR 1er Turno Actual")</th>
                    <th>@Html.Label("MTBF 1er Turno Actual")</th>
                    <th>
                        @Html.Label("-")
                    </th>
                    <th>@Html.Label("2do Turno Suma de fallas registradas")</th>
                    <th>@Html.Label("2do Turno Suma de tiempo fallas registradas")</th>
                    <th>@Html.Label("MTTR 2do Turno Actual")</th>
                    <th>@Html.Label("MTBF 2do Turno Actual")</th>
                    <th>
                        @Html.Label("-")
                    </th>
                    <th>@Html.Label("3er Turno Suma de fallas registradas")</th>
                    <th>@Html.Label("3er Turno Suma de tiempo fallas registradas")</th>
                    <th>@Html.Label("MTTR 3er Turno Actual")</th>
                    <th>@Html.Label("MTBF 3er Turno Actual")</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                <tr>
                    <td>
                        @Html.DisplayFor(Model => item.Maquina)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.count)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.time)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.Maxmttr)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.Minmtbf)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.Dis)
                    </td>
                    <td>
                        @Html.Label("-")
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.count1)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.time1)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMaxmttr1)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMinmtbf1)
                    </td>
                    <td>
                        @Html.Label("-")
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.count2)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.time2)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMaxmttr2)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMinmtbf2)
                    </td>
                    <td>
                        @Html.Label("-")
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.count3)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.time3)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMaxmttr3)
                    </td>
                    <td>
                        @Html.DisplayFor(Model => item.NewMinmtbf3)
                    </td>

                </tr>

                }
            </tbody>
        </table>
    </div>
</div>
<br />
<br />
<div class="x_panel">
    <div class="x_content">
        <canvas id="chartmtbf"></canvas>
    </div>
</div>


<br />
<br />

<div class="x_panel">
    <div class="x_content">
        <canvas id="chartmttr"></canvas>
    </div>
</div>

<div class="x_panel">
    <div class="x_content">
        <canvas id="charaa"></canvas>
    </div>
</div>

@section Scripts {

    <script>
            Chart.helpers.merge(Chart.defaults.global.plugins.datalabels, {
                           align: 'end',
                           anchor: 'end',
                           offset: 1,
                           color: '#FE777B'
});
                var barChartData =
            {
                   labels: [@Html.Raw(ViewBag.ObjectName)], //the names displayed on the x-axis, see images below
                // labels: ['a','b','c','d','e','f',], //the names displayed on the x-axis, see images below
                datasets: [{
                    label: 'MTBF Peores maquinas (Minutos Promedio para que ocurra una Falla)',
                     data: [@ViewBag.Data],
                    backgroundColor: ["#af0a0a"],
                    borderWidth: 2
                }]
            };
          var barChartData2 =
            {
                   labels: [@Html.Raw(ViewBag.ObjectName2)], //the names displayed on the x-axis, see images below
                // labels: ['a','b','c','d','e','f',], //the names displayed on the x-axis, see images below
                datasets: [{
                    label: 'MTTR Peores maquinas  (Minutos Promedio para Reparar una Falla)',
                     data: [@ViewBag.Data2],
                    backgroundColor: ["#af0a0a"],
                    borderWidth: 2
                }]
            };
        $(document).ready(function () {

       
            //var canvas = document.querySelector('canvas');
             // canvas.height =ViewBag.items*3;

            var data = {
               
    labels: ['OP10', 'OP20', 'OP30', 'OP40', 'OP50', 'OP60', 'OP70', 'OP80', 'OP90', 'OP100', 'OP110', 'OP120'],
                datasets: [{
         label: 'TIEMPO PERDIDO POR OPERACION',
                    data: [20, 10, 4, 2, 80, 45, 69, 85, 14, 15, 74, 36],
        backgroundColor: ["#af0a0a80"],
                    borderWidth: 2
    }]
}


            var ctx = document.getElementById('charaa');
var myRadarChart = new Chart(ctx, {
    type: 'radar',
    data: data
});



           var ctx = document.getElementById('chartmtbf');
           var myChart = new Chart(ctx, {
    type: 'horizontalBar',
    data:barChartData,
    options: {
        responsive: true,
        maintainAspectRatio: true,
                scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
           });
            var colorChangeValue = 450; //set this to whatever is the deciding color change value
var dataset = myChart.data.datasets[0];
for (var i = 0; i < dataset.data.length; i++) {
  if (dataset.data[i] < colorChangeValue) {
    dataset.backgroundColor[i] = "#af0a0a";;
  }
  else{
   dataset.backgroundColor[i] = "#0aaf0a";
    }
}
myChart.update();

          var ctx2 = document.getElementById('chartmttr');
           var myChart2 = new Chart(ctx2, {
    type: 'horizontalBar',
    data:barChartData2,
    options: {
        responsive: true,
        maintainAspectRatio: true,
                scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
var colorChangeValue = 45; //set this to whatever is the deciding color change value
var dataset = myChart2.data.datasets[0];
for (var i = 0; i < dataset.data.length; i++) {
  if (dataset.data[i] > colorChangeValue) {
    dataset.backgroundColor[i] = "#af0a0a";
  }
  else{
   dataset.backgroundColor[i] = "#0aaf0a";
    }
}
myChart2.update();


            $('#metricox').DataTable({
                "dom": 'lBfrtip',
                "lengthMenu": [[9, -1], ["9", "Todos"]],
                "buttons": [
                    {
                        extend: 'copy',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13]
                        },
                    },
                    {
                        extend: 'csv',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13]
                        },
                    },
                    {
                        extend: 'print',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13]
                        },
                    },
                    {
                        extend: 'pdfHtml5',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13]
                        },
                    },
                    {
                        extend: 'excelHtml5',
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13]
                        },
                    }
                ],
                "order": [[0, "asc"]],
                "scrollX": true,
                "language": {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "Ningun dato disponible en esta tabla =(",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "ultimo",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    },
                    "buttons": {
                        "copy": "Copiar",
                        "colvis": "Visibilidad"
                    }
                }
            });

        });
    </script>

}
