@model Flex_SGM.Models.CReclamos
@{
    Layout = "~/Views/Shared/_LayoutC.cshtml";
}
@{
    ViewBag.Title = "Edit";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-offset-2 col-md-8 col-sm-8 col-md-8">
            <div class="x_panel clearfix">
                <div class="x_title">
                    <h2>Editar Reclamo<small>Editar registro de reclamo </small></h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <div class="">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)
                        <div class="col-md-12">
                            <div class="form-group col-md-3">
                                @Html.LabelFor(model => model.Fecha, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    <div class="form-line" id="bs_datepicker_container">
                                        @Html.EditorFor(model => model.Fecha, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
                                    <p>Fecha en la que se origino el Reclamo</p>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.Oficial, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Oficial, new { htmlAttributes = new { @class = "form-control checkbox2" } })
                                    @Html.ValidationMessageFor(model => model.Oficial, "", new { @class = "text-danger" })
                                    <p>Reclamo Oficial?</p>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.IngCalidad, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.IngCalidad, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.IngCalidad, "", new { @class = "text-danger" })
                                    <p>Ing de calidad responsable</p>
                                </div>
                            </div>
                        </div>
                        <hr class="clearfix" />
                        <div class="col-md-12">
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Cliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Cliente, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Cliente, "", new { @class = "text-danger" })
                                        <p>Cliente que detecto</p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Planta, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Planta, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Planta, "", new { @class = "text-danger" })
                                        <p>Planta donde se origino el Reclamo </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NoReclamoCliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.NoReclamoCliente, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NoReclamoCliente, "", new { @class = "text-danger" })
                                        <p>Numero identificador del Reclamo de Cliente </p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NoReclamoFNG, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.NoReclamoFNG, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NoReclamoFNG, "", new { @class = "text-danger" })
                                        <p>Numero identificador del Reclamo interno </p>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <hr class="clearfix" />
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Defecto del Reclamo", htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.TextAreaFor(model => model.Defecto, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Defecto, "", new { @class = "text-danger" })
                                    <p>Defecto del reclamo </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NoParte, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.NoParte, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NoParte, "", new { @class = "text-danger" })
                                        <p>Numero de parte de la pieza con reclamo </p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Descripcionpz, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Descripcionpz, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Descripcionpz, "", new { @class = "text-danger" })
                                        <p>Descripcion de la pieza</p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Proceso, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Proceso, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Proceso, "", new { @class = "text-danger" })
                                        <p>Proceso que genera el reclamo</p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Cantidadpz, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Cantidadpz, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Cantidadpz, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr class="clearfix" />
                        <div class="col-md-12">
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.PLM, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.PLM, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PLM, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(model => model.costo, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.costo, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.costo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-8">
                                @Html.LabelFor(model => model.Comentarios, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.Comentarios, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Comentarios, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <hr class="clearfix" />
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.a1d, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.a1d, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.a1d, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.a5d, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.a5d, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.a5d, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.a10d, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.a10d, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.a10d, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.a20d, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.a20d, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.a20d, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.a30d, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.a30d, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.a30d, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <br />
                            <div class="form-group">

                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Guardar" class="btn btn-success col-md-6" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Basic Example -->
        <div class="col-lg-6 col-md-6 col-sm-12 col-md-12">
            <div class="x_panel cbr">
                <div class="x_title">
                    <center><h3>Condición NG</h3></center>
                    <input type="file" class="filepond" name="filepond1" multiple
                           data-max-file-size="30MB" data-max-files="6">
                </div>
                <div class="x_content">


                    <div id="carousel-example-generic1" class="carousel slide" data-ride="carousel">
                        <!-- Indicators -->
                        <ol class="carousel-indicators">
                            <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                        </ol>

                        <!-- Wrapper for slides -->
                        <div class="carousel-inner" role="listbox">
                            @{int i = 0;
                                string path = Path.Combine(Server.MapPath("~/Evidence/Quality/Reclamos"), "before", @Model.ID.ToString());
                                string path2 = Path.Combine("../../Evidence/Quality/Reclamos", "before", @Model.ID.ToString());

                                DirectoryInfo Folder;
                                FileInfo[] Images;


                                if (Directory.Exists(path))
                                {
                                    Folder = new DirectoryInfo(path);
                                    Images = Folder.GetFiles();
                                    List<String> imagesList = new List<String>();

                                    for (int ii = 0; ii < Images.Length; ii++)
                                    {
                                        imagesList.Add(String.Format(@"{0}\{1}", path2, Images[ii].Name));
                                        // Console.WriteLine(String.Format(@"{0}/{1}", folderName, Images[i].Name));
                                    }
                                    foreach (var item in imagesList)
                                    {
                                        i++;
                                        var active = i == 1 ? "active" : "";
                                        if (item.ToLower().Contains("jpg") || item.ToLower().Contains("jpeg") || item.ToLower().Contains("png") || item.ToLower().Contains("bmp"))
                                        {
                                            <div class="item @active">
                                                <img src="@Url.Content(@item)">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="item @active">
                                                <center>
                                                    @Html.ActionLink(@item, "Download", "CAndons", new { link = item }, null)
                                                </center>
                                            </div>
                                        }
                                    }
                                }
                            }
                        </div>

                        <!-- Controls -->
                        <a class="left carousel-control" href="#carousel-example-generic1" role="button" data-slide="prev">
                            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="right carousel-control" href="#carousel-example-generic1" role="button" data-slide="next">
                            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>

                </div>
            </div>
        </div>
        <!-- Basic Example -->
        <div class="col-lg-6 col-md-6 col-sm-12 col-md-12" id="Evidence">
            <div class="x_panel cbv">
                <div class="x_title">
                    <center><h3>Condicion OK </h3></center>
                    <input type="file" class="filepond" name="filepond2" multiple
                           data-max-file-size="30MB" data-max-files="6">
                </div>
                <div class="x_content">



                    <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
                        <!-- Indicators -->
                        <ol class="carousel-indicators">
                            <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                        </ol>

                        <!-- Wrapper for slides -->
                        <div class="carousel-inner" role="listbox">
                            @{ i = 0;
                                path = Path.Combine(Server.MapPath("~/Evidence/Quality/Reclamos"), "after", @Model.ID.ToString());
                                path2 = Path.Combine("../../Evidence/Quality/Reclamos", "after", @Model.ID.ToString());

                                if (Directory.Exists(path))
                                {
                                    Folder = new DirectoryInfo(path);
                                    Images = Folder.GetFiles();
                                    List<String> imagesList = new List<String>();

                                    for (int ii = 0; ii < Images.Length; ii++)
                                    {
                                        imagesList.Add(String.Format(@"{0}\{1}", path2, Images[ii].Name));
                                        // Console.WriteLine(String.Format(@"{0}/{1}", folderName, Images[i].Name));
                                    }
                                    foreach (var item in imagesList)
                                    {
                                        i++;
                                        var active = i == 1 ? "active" : "";
                                        if (item.ToLower().Contains("jpg") || item.ToLower().Contains("jpeg") || item.ToLower().Contains("png") || item.ToLower().Contains("bmp"))
                                        {
                                            <div class="item @active">
                                                <img src="@Url.Content(@item)">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="item @active">
                                                <center>
                                                    @Html.ActionLink(@item, "Download", "CAndons", new { link = item }, null)
                                                </center>
                                            </div>
                                        }
                                    }
                                }
                            }
                        </div>

                        <!-- Controls -->
                        <a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev">
                            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next">
                            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div>

    @Html.ActionLink("Regresar", "Index")
    <div class="btn btn-default">@Html.ActionLink("Menu Calidad", "Index", "Calidad", null, htmlAttributes: new { @onclick = "$('#loadingImg').show();" })</div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @if (ViewBag.Section != null)
    {
        <script>
        $(function () {
                window.location.hash = '#@ViewBag.Section';
        });
        </script>
    }
    <script>

    FilePond.setOptions(labels_es_ES);

   var pond1= FilePond.create(document.querySelector('[name ="filepond1"]'));
    pond1.setOptions({
server: '@Url.Action("SaveFile", "CReclamos", new { id= @Model.ID ,t="a" })'
    });
        pond1.on('FilePond:addfile', function (e) {
            console.log('file added event', e);
        });

    var pond2 =   FilePond.create(document.querySelector('[name ="filepond2"]'));

    pond2.setOptions({
server: '@Url.Action("SaveFile", "CReclamos", new { id=  @Model.ID, t = "d" })'
});

        pond2.on('FilePond:addfile', function (e) {
            console.log('file added event', e);
        });




    </script>
}