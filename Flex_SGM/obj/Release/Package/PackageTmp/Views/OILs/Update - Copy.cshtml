@model Flex_SGM.Models.OILs


@{
    ViewBag.Title = "Edit";
}

<h2>Actualizar estado de Proyecto o Actividad</h2>

<div class="row clearfix">
    <center> @{Html.RenderPartial("_Result");}</center>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="card col-md-12">
    <h4>@ViewBag.Message</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.MaquinasID)
    @Html.HiddenFor(model => model.Tipo)


    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.Maquinas.Area, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Maquinas.Area, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.Maquinas.Area)
            @Html.ValidationMessageFor(model => model.Maquinas.Area, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.Maquinas.Cliente, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Maquinas.Cliente, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.Maquinas.Cliente)
            @Html.ValidationMessageFor(model => model.Maquinas.Cliente, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.Maquinas.Maquina, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Maquinas.Maquina, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.Maquinas.Maquina)
            @Html.ValidationMessageFor(model => model.Maquinas.Maquina, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-12">
        @Html.LabelFor(model => model.folio, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.folio, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.folio)
            @Html.ValidationMessageFor(model => model.folio, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-12">
        @Html.LabelFor(model => model.Actividad, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.Actividad, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.Actividad)
            @Html.ValidationMessageFor(model => model.Actividad, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.folio, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.folio, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.folio)
            @Html.ValidationMessageFor(model => model.folio, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-6">
        @Html.LabelFor(model => model.User_gen, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.User_gen, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.User_gen)
            @Html.ValidationMessageFor(model => model.User_gen, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group col-md-6">
        @Html.LabelFor(model => model.User_res, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.User_res, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.User_res)
            @Html.ValidationMessageFor(model => model.User_res, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-6">
        @Html.LabelFor(model => model.DiaHora, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DiaHora, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.HiddenFor(model => model.DiaHora)
            @Html.ValidationMessageFor(model => model.DiaHora, "", new { @class = "text-danger" })
        </div>
    </div>

    @if (Model.DiaHora_Compromiso == null)
    {
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.DiaHora_Compromiso, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="form-line" id="bs_datepicker_container">
                    @Html.EditorFor(model => model.DiaHora_Compromiso, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                </div>
            </div>
        </div>


    }
    else
    {
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.DiaHora_Compromiso, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DiaHora_Compromiso, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.DiaHora_Compromiso)
            </div>
        </div>

    }
    <div class="form-group col-md-6">
        @Html.LabelFor(model => model.User_asig, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("User_asig", null, "-", htmlAttributes: new { @class = "form-control", id = "Normaldrop1" })
            @Html.ValidationMessageFor(model => model.User_asig, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group  col-md-6">
        @Html.Label("Actividad Urgente", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.urgente)
                @Html.ValidationMessageFor(model => model.urgente, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    @Html.HiddenFor(model => model.DiaHora_Cierre)
    @Html.HiddenFor(model => model.DiaHora_Verificado)
    @Html.HiddenFor(model => model.Usuario_Verifico)
    <div class="form-group col-md-12">
        @Html.LabelFor(model => model.Comentarios, htmlAttributes: new { @class = "control-label col-md-2" })
        <div>
            @Html.DisplayFor(model => model.Comentarios, new { htmlAttributes = new { @class = "form-control col-md-10", disabled = "disabled" } })
            @Html.HiddenFor(model => model.Comentarios)
            @Html.ValidationMessageFor(model => model.Comentarios, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-md-12">
        @Html.Label("Comentarios de Cierre de Actividad", htmlAttributes: new { @class = "control-label col-md-2" })
        <div>
            @Html.TextAreaFor(model => model.Material_necesario, new { htmlAttributes = new { @class = "form-control col-md-10" } })
            @Html.ValidationMessageFor(model => model.Material_necesario, "", new { @class = "text-danger" })
        </div>
    </div>

    @Html.HiddenFor(model => model.Estatus)

    <div class="form-group col-md-6">
        @Html.Label("Actividad Finalizada", htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.CheckBox("Actividad_Finalizada", false)
    </div>

    <div class="form-group">
        <div class="col-md-6">
            <input type="submit" value="Guardar Cambios" class="btn btn-success" />
        </div>
    </div>

</div>
}

<div class="row">
    <center> @{Html.RenderPartial("_Result");}</center>
</div>
<!-- Basic Example -->
<div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
    <div class="card">
        <div class="body">
            <div id="carousel-example-generic1" class="carousel slide" data-ride="carousel">
                <!-- Indicators -->
                <ol class="carousel-indicators">
                    <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                </ol>

                <!-- Wrapper for slides -->
                <div class="carousel-inner" role="listbox">
                    @{int i = 0;
                        string path = Path.Combine(Server.MapPath("~/Evidence"), "before", @Model.ID.ToString());
                        string path2 = Path.Combine("../../Evidence", "before", @Model.ID.ToString());

                        DirectoryInfo Folder;
                        FileInfo[] Images;


                        if (Directory.Exists(path))
                        {
                            Folder = new DirectoryInfo(path);
                            Images = Folder.GetFiles();
                            List<String> imagesList = new List<String>();

                            for (int ii = 0; ii < Images.Length; ii++)
                            {
                                imagesList.Add(String.Format(@"{0}\{1}", path2, Images[ii].Name));
                                // Console.WriteLine(String.Format(@"{0}/{1}", folderName, Images[i].Name));
                            }
                            foreach (var item in imagesList)
                            {
                                i++;
                                var active = i == 1 ? "active" : "";
                                <div class="item @active">
                                    <img src="@Url.Content(@item)">
                                </div>
                            }
                        }
                    }
                </div>

                <!-- Controls -->
                <a class="left carousel-control" href="#carousel-example-generic1" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#carousel-example-generic1" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>

            @using (Html.BeginForm("fileua", "OILs", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.HiddenFor(model => model.ID)
                <label>-Evidencia Antes- (Solo Imagenes)</label>
                <input type="file" name="someFile" />

                <input type="submit" value="Upload" name="UploadButton" id="UploadButton" />
                @ViewBag.Message
            }

            <input type="file" class="filepond" name="filepond" multiple
                   data-max-file-size="4MB" data-max-files="5">
        </div>
    </div>
</div>
<!-- Basic Example -->
<div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
    <div class="card">
        <div class="body">
            <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
                <!-- Indicators -->
                <ol class="carousel-indicators">
                    <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                </ol>

                <!-- Wrapper for slides -->
                <div class="carousel-inner" role="listbox">
                    @{ i = 0;
                         path = Path.Combine(Server.MapPath("~/Evidence"), "after", @Model.ID.ToString());
                         path2 = Path.Combine("../../Evidence", "after", @Model.ID.ToString());

                        if (Directory.Exists(path))
                        {
                            Folder = new DirectoryInfo(path);
                            Images = Folder.GetFiles();
                            List<String> imagesList = new List<String>();

                            for (int ii = 0; ii < Images.Length; ii++)
                            {
                                imagesList.Add(String.Format(@"{0}\{1}", path2, Images[ii].Name));
                                // Console.WriteLine(String.Format(@"{0}/{1}", folderName, Images[i].Name));
                            }
                            foreach (var item in imagesList)
                            {
                                i++;
                                var active = i == 1 ? "active" : "";
                                <div class="item @active">
                                    <img src="@Url.Content(@item)">
                                </div>
                            }
                        }
                    }
                </div>

                <!-- Controls -->
                <a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>

            @using (Html.BeginForm("fileud", "OILs", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.HiddenFor(model => model.ID)
                <label>-Evidencia Después- (Solo Imagenes)</label>
                <input type="file" name="someFile" />

                <input type="submit" value="Upload" name="UploadButton" id="UploadButton" />
                @ViewBag.Message


            }
        </div>
    </div>
</div>


<div class="row">
    <center> @{Html.RenderPartial("_Result");}</center>
</div>



<div>
    @Html.ActionLink("Regresar a proyectos", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>


     //   Dropzone.options.dropzoneForm = {
      //      init: function () {
      //          var myDropzone = this;
      //          this.on("complete", function (data) {
      //              var res = JSON.parse(data.xhr.responseText);
      //              console.log(res.Message);
      //          });
      //      }
      //  };


     //   FilePond.registerPlugin(
            // encodes the file as base64 data
      //      FilePondPluginFileEncode,
            // validates the size of the file
       //     FilePondPluginFileValidateSize,
            // corrects mobile image orientation
        //    FilePondPluginImageExifOrientation,
            // previews dropped images
         //   FilePondPluginImagePreview
      //  );
        // Select the file input and use create() to turn it into a pond
        FilePond.create(document.querySelector('.filepond'));

        FilePond.setOptions({
server: '@Url.Action("SaveFile", "oils", new { id= Model.ID })'
});

        $(function () {

            $("#Normaldrop").chosen();
            $("#Normaldrop1").chosen();
        });




        /*
          <div class="x_panel">
<div class="x_title">
        <h2>Dropzone Subir Archivos</h2>
        <div class="clearfix"></div>
</div>
<div class="x_content">
        <p>Arrastra multiples archvios a la caja o da un click para seleccionar el archivo.</p>
        Html.FileUploadForm("~/OILs/SaveUploadedFile")


</div>
</div>

         */
</script>
}
